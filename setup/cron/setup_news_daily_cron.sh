#!/bin/bash
"""
News Daily Update Cron Setup Script

Sets up automated daily news ingestion at 6:00 AM with proper logging,
error handling, and optional systemd service configuration.

Usage:
    ./setup_news_daily_cron.sh [--systemd] [--test]
    
Options:
    --systemd    Create systemd timer instead of cron job
    --test       Set up test schedule (every 5 minutes) for validation
"""

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
VENV_PATH="${PROJECT_DIR}/venv"
UPDATER_SCRIPT="${SCRIPT_DIR}/ingestion/news_daily_updater.py"
LOG_DIR="${SCRIPT_DIR}/ingestion/logs"
CRON_LOG="${LOG_DIR}/news_daily_cron.log"

# Default schedule (6:00 AM daily)
CRON_SCHEDULE="0 6 * * *"
SYSTEMD_SCHEDULE="*-*-* 06:00:00"

# Parse arguments
USE_SYSTEMD=false
TEST_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --systemd)
            USE_SYSTEMD=true
            shift
            ;;
        --test)
            TEST_MODE=true
            CRON_SCHEDULE="*/5 * * * *"  # Every 5 minutes for testing
            SYSTEMD_SCHEDULE="*-*-* *:*:00/300"  # Every 5 minutes
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $0 [--systemd] [--test]"
            exit 1
            ;;
    esac
done

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
}

# Validation functions
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check if updater script exists
    if [[ ! -f "$UPDATER_SCRIPT" ]]; then
        error "News daily updater script not found: $UPDATER_SCRIPT"
        exit 1
    fi
    
    # Check if virtual environment exists
    if [[ ! -d "$VENV_PATH" ]]; then
        warning "Virtual environment not found at $VENV_PATH"
        warning "Creating virtual environment..."
        python3 -m venv "$VENV_PATH"
        source "$VENV_PATH/bin/activate"
        pip install -r "${PROJECT_DIR}/requirements.txt"
    fi
    
    # Create log directory
    mkdir -p "$LOG_DIR"
    
    # Test database connectivity
    log "Testing database connectivity..."
    if source "$VENV_PATH/bin/activate" && python3 "$UPDATER_SCRIPT" --health-check > /dev/null 2>&1; then
        success "Database connectivity verified"
    else
        warning "Database connectivity test failed - check configuration"
    fi
    
    success "Prerequisites validated"
}

# Create cron job
setup_cron() {
    log "Setting up cron job for news daily updates..."
    
    # Create wrapper script for cron execution
    CRON_WRAPPER="${SCRIPT_DIR}/run_news_daily_update.sh"
    
    cat > "$CRON_WRAPPER" << EOF
#!/bin/bash
# News Daily Update Cron Wrapper
# Generated by setup_news_daily_cron.sh

set -euo pipefail

# Configuration
PROJECT_DIR="$PROJECT_DIR"
VENV_PATH="$VENV_PATH"
UPDATER_SCRIPT="$UPDATER_SCRIPT"
LOG_FILE="$CRON_LOG"

# Ensure log directory exists
mkdir -p "$(dirname "\$LOG_FILE")"

# Log start
echo "\$(date '+%Y-%m-%d %H:%M:%S') - Starting news daily update" >> "\$LOG_FILE"

# Activate virtual environment and run updater
cd "\$PROJECT_DIR"
source "\$VENV_PATH/bin/activate"

# Run the updater with error handling
if python3 "\$UPDATER_SCRIPT" --log-level INFO >> "\$LOG_FILE" 2>&1; then
    echo "\$(date '+%Y-%m-%d %H:%M:%S') - News daily update completed successfully" >> "\$LOG_FILE"
    exit 0
else
    echo "\$(date '+%Y-%m-%d %H:%M:%S') - News daily update failed with exit code \$?" >> "\$LOG_FILE"
    exit 1
fi
EOF
    
    chmod +x "$CRON_WRAPPER"
    
    # Add to crontab
    CRON_ENTRY="$CRON_SCHEDULE $CRON_WRAPPER"
    
    # Check if cron entry already exists
    if crontab -l 2>/dev/null | grep -q "$CRON_WRAPPER"; then
        warning "Cron job already exists, updating..."
        # Remove existing entry and add new one
        (crontab -l 2>/dev/null | grep -v "$CRON_WRAPPER"; echo "$CRON_ENTRY") | crontab -
    else
        # Add new entry
        (crontab -l 2>/dev/null; echo "$CRON_ENTRY") | crontab -
    fi
    
    success "Cron job configured: $CRON_SCHEDULE"
    success "Wrapper script: $CRON_WRAPPER"
    success "Log file: $CRON_LOG"
}

# Create systemd service and timer
setup_systemd() {
    log "Setting up systemd service and timer for news daily updates..."
    
    # Service file
    SERVICE_FILE="/etc/systemd/system/news-daily-update.service"
    TIMER_FILE="/etc/systemd/system/news-daily-update.timer"
    
    # Check if we have sudo access
    if ! sudo -n true 2>/dev/null; then
        error "Systemd setup requires sudo access"
        exit 1
    fi
    
    # Create service file
    sudo tee "$SERVICE_FILE" > /dev/null << EOF
[Unit]
Description=Vector View News Daily Update
After=network.target postgresql.service
Wants=postgresql.service

[Service]
Type=oneshot
User=$(whoami)
Group=$(id -gn)
WorkingDirectory=$PROJECT_DIR
Environment=PATH=$VENV_PATH/bin:/usr/local/bin:/usr/bin:/bin
ExecStart=$VENV_PATH/bin/python $UPDATER_SCRIPT --log-level INFO
StandardOutput=append:$CRON_LOG
StandardError=append:$CRON_LOG
TimeoutSec=3600

[Install]
WantedBy=multi-user.target
EOF
    
    # Create timer file
    sudo tee "$TIMER_FILE" > /dev/null << EOF
[Unit]
Description=Run Vector View News Daily Update
Requires=news-daily-update.service

[Timer]
OnCalendar=$SYSTEMD_SCHEDULE
Persistent=true
RandomizedDelaySec=300

[Install]
WantedBy=timers.target
EOF
    
    # Reload systemd and enable timer
    sudo systemctl daemon-reload
    sudo systemctl enable news-daily-update.timer
    sudo systemctl start news-daily-update.timer
    
    success "Systemd service created: $SERVICE_FILE"
    success "Systemd timer created: $TIMER_FILE"
    success "Timer enabled and started"
    
    # Show timer status
    log "Timer status:"
    sudo systemctl status news-daily-update.timer --no-pager
}

# Test the setup
test_setup() {
    log "Testing the setup..."
    
    if [[ "$USE_SYSTEMD" == true ]]; then
        log "Testing systemd service..."
        if sudo systemctl start news-daily-update.service; then
            success "Systemd service test passed"
        else
            error "Systemd service test failed"
            sudo journalctl -u news-daily-update.service --no-pager -n 20
        fi
    else
        log "Testing cron wrapper script..."
        if bash "${SCRIPT_DIR}/run_news_daily_update.sh"; then
            success "Cron wrapper test passed"
        else
            error "Cron wrapper test failed"
            tail -20 "$CRON_LOG"
        fi
    fi
}

# Show status
show_status() {
    echo
    log "📊 News Daily Update Schedule Status"
    echo "=================================="
    
    if [[ "$USE_SYSTEMD" == true ]]; then
        echo "Method: systemd timer"
        echo "Schedule: $SYSTEMD_SCHEDULE"
        echo "Service: news-daily-update.service"
        echo "Timer: news-daily-update.timer"
        echo
        sudo systemctl list-timers news-daily-update.timer --no-pager
    else
        echo "Method: cron job"
        echo "Schedule: $CRON_SCHEDULE"
        echo "Wrapper: ${SCRIPT_DIR}/run_news_daily_update.sh"
        echo
        echo "Current crontab entries:"
        crontab -l 2>/dev/null | grep -E "(news|daily)" || echo "No news-related cron jobs found"
    fi
    
    echo
    echo "Log file: $CRON_LOG"
    echo "Updater script: $UPDATER_SCRIPT"
    
    if [[ "$TEST_MODE" == true ]]; then
        warning "TEST MODE: Running every 5 minutes - remember to disable after testing!"
    fi
}

# Main execution
main() {
    echo "🚀 Vector View News Daily Update Setup"
    echo "====================================="
    
    if [[ "$TEST_MODE" == true ]]; then
        warning "Running in TEST MODE - will schedule every 5 minutes"
    fi
    
    check_prerequisites
    
    if [[ "$USE_SYSTEMD" == true ]]; then
        setup_systemd
    else
        setup_cron
    fi
    
    test_setup
    show_status
    
    echo
    success "News daily update scheduling completed successfully!"
    
    if [[ "$TEST_MODE" == true ]]; then
        echo
        warning "TEST MODE ACTIVE:"
        warning "- Updates will run every 5 minutes"
        warning "- Monitor logs: tail -f $CRON_LOG"
        warning "- Disable test mode when satisfied with setup"
    else
        echo
        log "Next steps:"
        echo "1. Monitor first run: tail -f $CRON_LOG"
        echo "2. Check daily at 6:00 AM for automatic updates"
        echo "3. Review logs regularly for any issues"
    fi
}

# Run main function
main "$@"
