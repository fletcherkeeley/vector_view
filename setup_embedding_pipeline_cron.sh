#!/bin/bash
"""
Vector/Embedding Pipeline Cron Setup Script

Sets up automated daily vector processing at 7:30 AM (after news sync completes).
Processes news articles from PostgreSQL and creates embeddings in ChromaDB.

Usage:
    chmod +x setup_embedding_pipeline_cron.sh
    ./setup_embedding_pipeline_cron.sh [--test]
    
Options:
    --test       Set up test schedule (every 10 minutes) for validation
"""

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$SCRIPT_DIR"
VENV_PATH="${PROJECT_DIR}/venv"
EMBEDDING_SCRIPT="${PROJECT_DIR}/semantic/embedding_pipeline.py"
LOG_DIR="${PROJECT_DIR}/ingestion/logs"
CRON_LOG="${LOG_DIR}/embedding_pipeline_cron.log"

# Default schedule (7:30 AM daily - after news sync)
CRON_SCHEDULE="30 7 * * *"

# Parse arguments
TEST_MODE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --test)
            TEST_MODE=true
            CRON_SCHEDULE="*/10 * * * *"  # Every 10 minutes for testing
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $0 [--test]"
            exit 1
            ;;
    esac
done

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}✅ $1${NC}"
}

warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

error() {
    echo -e "${RED}❌ $1${NC}"
}

# Validation functions
check_prerequisites() {
    log "Checking prerequisites for embedding pipeline..."
    
    # Check if embedding script exists
    if [[ ! -f "$EMBEDDING_SCRIPT" ]]; then
        error "Embedding pipeline script not found: $EMBEDDING_SCRIPT"
        exit 1
    fi
    
    # Check if virtual environment exists
    if [[ ! -d "$VENV_PATH" ]]; then
        warning "Virtual environment not found at $VENV_PATH"
        warning "Creating virtual environment..."
        python3 -m venv "$VENV_PATH"
        source "$VENV_PATH/bin/activate"
        pip install -r "${PROJECT_DIR}/requirements.txt"
    fi
    
    # Create log directory
    mkdir -p "$LOG_DIR"
    
    # Test database connectivity and ChromaDB
    log "Testing embedding pipeline connectivity..."
    if source "$VENV_PATH/bin/activate" && cd "$PROJECT_DIR" && python3 -c "
import asyncio
import sys
sys.path.insert(0, 'semantic')
from embedding_pipeline import create_embedding_pipeline

async def test():
    try:
        pipeline = await create_embedding_pipeline()
        stats = await pipeline.get_pipeline_stats()
        print('✅ Embedding pipeline connectivity verified')
        return True
    except Exception as e:
        print(f'❌ Embedding pipeline test failed: {e}')
        return False

result = asyncio.run(test())
exit(0 if result else 1)
" > /dev/null 2>&1; then
        success "Embedding pipeline connectivity verified"
    else
        warning "Embedding pipeline connectivity test failed - check configuration"
    fi
    
    success "Prerequisites validated"
}

# Create cron job
setup_cron() {
    log "Setting up cron job for embedding pipeline..."
    
    # Create wrapper script for cron execution
    CRON_WRAPPER="${PROJECT_DIR}/run_embedding_pipeline.sh"
    
    cat > "$CRON_WRAPPER" << EOF
#!/bin/bash
# Embedding Pipeline Cron Wrapper
# Generated by setup_embedding_pipeline_cron.sh

set -euo pipefail

# Configuration
PROJECT_DIR="$PROJECT_DIR"
VENV_PATH="$VENV_PATH"
EMBEDDING_SCRIPT="$EMBEDDING_SCRIPT"
LOG_FILE="$CRON_LOG"

# Ensure log directory exists
mkdir -p "\$(dirname "\$LOG_FILE")"

# Log start
echo "\$(date '+%Y-%m-%d %H:%M:%S') - Starting embedding pipeline" >> "\$LOG_FILE"

# Change to project directory and activate virtual environment
cd "\$PROJECT_DIR"
source "\$VENV_PATH/bin/activate"

# Run the embedding pipeline with error handling
if python3 "\$EMBEDDING_SCRIPT" >> "\$LOG_FILE" 2>&1; then
    echo "\$(date '+%Y-%m-%d %H:%M:%S') - Embedding pipeline completed successfully" >> "\$LOG_FILE"
    exit 0
else
    EXIT_CODE=\$?
    echo "\$(date '+%Y-%m-%d %H:%M:%S') - Embedding pipeline failed with exit code \$EXIT_CODE" >> "\$LOG_FILE"
    exit \$EXIT_CODE
fi
EOF
    
    chmod +x "$CRON_WRAPPER"
    
    # Add to crontab
    CRON_ENTRY="$CRON_SCHEDULE $CRON_WRAPPER"
    
    # Check if cron entry already exists
    if crontab -l 2>/dev/null | grep -q "$CRON_WRAPPER"; then
        warning "Cron job already exists, updating..."
        # Remove existing entry and add new one
        (crontab -l 2>/dev/null | grep -v "$CRON_WRAPPER"; echo "$CRON_ENTRY") | crontab -
    else
        # Add new entry
        (crontab -l 2>/dev/null; echo "$CRON_ENTRY") | crontab -
    fi
    
    success "Cron job configured: $CRON_SCHEDULE"
    success "Wrapper script: $CRON_WRAPPER"
    success "Log file: $CRON_LOG"
}

# Test the setup
test_setup() {
    log "Testing the embedding pipeline setup..."
    
    log "Testing cron wrapper script..."
    if bash "${PROJECT_DIR}/run_embedding_pipeline.sh"; then
        success "Cron wrapper test passed"
    else
        error "Cron wrapper test failed"
        tail -20 "$CRON_LOG"
        return 1
    fi
}

# Show status
show_status() {
    echo
    log "📊 Embedding Pipeline Schedule Status"
    echo "===================================="
    
    echo "Method: cron job"
    echo "Schedule: $CRON_SCHEDULE"
    echo "Wrapper: ${PROJECT_DIR}/run_embedding_pipeline.sh"
    echo "Script: $EMBEDDING_SCRIPT"
    echo "Log file: $CRON_LOG"
    echo
    echo "Current crontab entries:"
    crontab -l 2>/dev/null | grep -E "(embedding|vector)" || echo "No embedding-related cron jobs found"
    
    if [[ "$TEST_MODE" == true ]]; then
        warning "TEST MODE: Running every 10 minutes - remember to disable after testing!"
    fi
}

# Create monitoring script
create_monitoring_script() {
    log "Creating monitoring script..."
    
    MONITOR_SCRIPT="$PROJECT_DIR/check_embedding_pipeline_health.sh"
    cat > "$MONITOR_SCRIPT" << 'EOF'
#!/bin/bash
# Embedding Pipeline Health Check Script

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_PATH="$PROJECT_DIR/venv"
LOG_FILE="$PROJECT_DIR/ingestion/logs/embedding_pipeline_cron.log"

echo "📊 Embedding Pipeline Health Check - $(date)"
echo "=============================================="

# Check if pipeline script exists
if [ ! -f "$PROJECT_DIR/semantic/embedding_pipeline.py" ]; then
    echo "❌ Embedding pipeline script not found!"
    exit 1
fi

# Check recent logs
echo ""
echo "📋 Recent Cron Logs:"
echo "-------------------"
if [ -f "$LOG_FILE" ]; then
    tail -10 "$LOG_FILE"
else
    echo "No log file found at $LOG_FILE"
fi

# Check if pipeline ran today
TODAY=$(date +%Y-%m-%d)
if [ -f "$LOG_FILE" ] && grep -q "$TODAY" "$LOG_FILE"; then
    echo "✅ Pipeline ran today"
    
    # Check for errors in today's logs
    if grep "$TODAY" "$LOG_FILE" | grep -q "failed\|error\|Error\|ERROR"; then
        echo "⚠️  Errors found in today's logs"
    else
        echo "✅ No errors in today's logs"
    fi
else
    echo "⚠️  No pipeline execution found for today"
fi

echo ""
echo "📊 Pipeline Statistics:"
echo "----------------------"
cd "$PROJECT_DIR"
source "$VENV_PATH/bin/activate"
python3 -c "
import asyncio
import sys
sys.path.insert(0, 'semantic')
from embedding_pipeline import create_embedding_pipeline

async def get_stats():
    try:
        pipeline = await create_embedding_pipeline()
        stats = await pipeline.get_pipeline_stats()
        
        print(f'Total articles: {stats[\"postgresql\"][\"total_articles\"]}')
        print(f'Embedded articles: {stats[\"postgresql\"][\"embedded_articles\"]}')
        print(f'Completion: {stats[\"completion_percentage\"]:.1f}%')
        
        if 'vector_store' in stats:
            vs_stats = stats['vector_store']
            print(f'ChromaDB collections: {len(vs_stats)}')
    except Exception as e:
        print(f'❌ Failed to get stats: {e}')

asyncio.run(get_stats())
"
EOF
    
    chmod +x "$MONITOR_SCRIPT"
    success "Created monitoring script: $MONITOR_SCRIPT"
}

# Main execution
main() {
    echo "🚀 Vector/Embedding Pipeline Cron Setup"
    echo "========================================"
    
    if [[ "$TEST_MODE" == true ]]; then
        warning "Running in TEST MODE - will schedule every 10 minutes"
    fi
    
    check_prerequisites
    setup_cron
    create_monitoring_script
    test_setup
    show_status
    
    echo
    success "Embedding pipeline cron job setup completed successfully!"
    
    if [[ "$TEST_MODE" == true ]]; then
        echo
        warning "TEST MODE ACTIVE:"
        warning "- Pipeline will run every 10 minutes"
        warning "- Monitor logs: tail -f $CRON_LOG"
        warning "- Disable test mode when satisfied with setup"
    else
        echo
        log "Next steps:"
        echo "1. Monitor first run: tail -f $CRON_LOG"
        echo "2. Check daily at 7:30 AM for automatic vector processing"
        echo "3. Use monitoring script: $PROJECT_DIR/check_embedding_pipeline_health.sh"
        echo "4. Vector processing will run 30 minutes after news sync"
    fi
    
    echo
    log "Complete daily schedule:"
    echo "6:00 AM - FRED Economic Data"
    echo "6:30 AM - Yahoo Finance Data"
    echo "7:00 AM - News Data Sync"
    echo "7:30 AM - Vector/Embedding Processing ← NEW"
}

# Run main function
main "$@"
